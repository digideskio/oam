#!/usr/bin/env python

import sys
import urlgrabber, urlgrabber.progress
# try:
#     from osgeo import gdal, gdalconst
# except ImportError:
#     import gdal, gdalconst

def fetch_image_files(layer, opts):
    if opts.layer:
        path = str(opts.layer)
        if not opts.test and not os.path.isdir(path):
            os.makedirs(path)
    else:
        path = "."
    for image in layer["images"]:
        filetype = image["url"].split(".")[-1]
        target = os.path.join(path, image["hash"] + "." + filetype)
        if opts.test:
            print >>sys.stderr, image["url"], "->", target
        else:
            meter = urlgrabber.progress.text_progress_meter()
            urlgrabber.urlgrab(image["url"], target, progress_obj=meter)

def run_gdalbuildvrt(opts):
    layer_id = str(opts.layer)
    glob = os.path.join(layer_id, "*.*")
    os.system("gdalbuildvrt %s.vrt %s" % (layer_id, glob))

# def merge_bounding_boxes(images):
#     union = list(images[0]["bbox"])
#    for image in images[1:]:
#         bbox = images["bbox"]
#         union = [min(bbox[0], union[0]),
#                  min(bbox[1], union[1]),
#                  max(bbox[2], union[2]),
#                  max(bbox[3], union[3])]
#     return union
# 
# def compute_resolution(image):
#     return (image["bbox"][2] - image["bbox"][0]) / image["width"],
#             image["bbox"][3] - image["bbox"][1]) / image["height"])
# 
# def generate_vrt(layer, opts):
#     bbox = merge_bounding_boxes(layer["images"])
#     xres, yres = compute_resolution(layer["images"][0])
    

if __name__ == "__main__":
    import pprint
    opts = parse_options()
    if not opts.layer:
        result = fetch_image(opts)
        if opts.test:
            print result
        else:
            image_list = result.get("images", [image])
            fetch_images(image_list, opts)
    else:
        layer = fetch_layer(opts)
        fetch_image_files(opts.layer, opts)
        run_gdalbuildvrt(opts)
